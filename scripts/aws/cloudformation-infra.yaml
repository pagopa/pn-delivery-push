AWSTemplateFormatVersion: 2010-09-09
Description: Deploy PN-delivery-push and ensure infrastructure
Parameters:
  EnvName:
    Type: String
    Description: Nome dell'ambiente destinazione
  EnvNumber:
    Type: String
    Description: Second byte from the left for VPC CIDR
  KeyspaceName:
    Type: String
    Description: cassandra keyspace name
  AddressBookUrl:
    Type: String
    Description: url del mock address book
  PecSecondAttemptWaitTime:
    Type: String
    Description: tempo di attesa tra un tentativo di invio pec e il successivo tentativo allo stesso indirizzo
  RecipientTimeoutDelayAnalog:
    Type: String
    Description: tempo di perfezionamento della notifica per il destinatario analogico
  RecipientTimeoutDelayDigital:
    Type: String
    Description: tempo di perfezionamento della notifica per il destinatario digitale
  RefinementTimeCompletelyUnreachable:
    Type: String
    Description: tempo di perfezionamento della notifica per il destinatario analogico irreperibile totale
  WebhookScanInterval:
    Type: String
    Description: milliseconds between webhook scans
  WebhookMaxLength:
    Type: String
    Description: max number of elements in the webhook request

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref EnvName, DeliveryPushCluster]]
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref EnvName, DeliveryPushTaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 1024
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 2GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub '${EnvName}-delivery-push'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvName}-pn-delivery-push:latest'
          Environment:
            - Name: AWS_REGIONCODE
              Value: !Ref AWS::Region
            - Name: AWS_BUCKETNAME
              Value: !ImportValue { "Fn::Sub": '${EnvName}-attachments-bucket-name' }
            - Name: PN_CLIENTS_ADDRESSBOOKBASEURL
              Value: !Sub '${AddressBookUrl}'
            - Name: PN_DELIVERYPUSH_TOPICS_NEWNOTIFICATIONS
              Value: !ImportValue { "Fn::Sub": '${EnvName}-delpush-input-queue-name' }
            - Name: PN_DELIVERYPUSH_TOPICS_TOEXTERNALCHANNELPEC
              Value: !ImportValue { "Fn::Sub": '${EnvName}-extchannel-input-queue-name' }
            - Name: PN_DELIVERYPUSH_TOPICS_TOEXTERNALCHANNELEMAIL
              Value: !ImportValue { "Fn::Sub": '${EnvName}-extchannel-input-queue-name' }
            - Name: PN_DELIVERYPUSH_TOPICS_TOEXTERNALCHANNELPAPER
              Value: !ImportValue { "Fn::Sub": '${EnvName}-extchannel-input-queue-name' }
            - Name: PN_DELIVERYPUSH_TOPICS_FROMEXTERNALCHANNEL
              Value: !ImportValue { "Fn::Sub": '${EnvName}-extchannel-output-queue-name' }
            - Name: PN_DELIVERYPUSH_TOPICS_SCHEDULEDACTIONS
              Value: !ImportValue { "Fn::Sub": '${EnvName}-delpush-actions-queue-name' }
            - Name: PN_DELIVERYPUSH_TOPICS_EXECUTEDACTIONS
              Value: !ImportValue { "Fn::Sub": '${EnvName}-delpush-actions-done-queue-name' }
            - Name: PN_DELIVERYPUSH_WEBHOOK_SCHEDULEINTERVAL
              Value: !Ref WebhookScanInterval
            - Name: PN_DELIVERYPUSH_WEBHOOK_MAXLENGTH
              Value: !Ref WebhookMaxLength
            - Name: PN_DELIVERYPUSH_WEBAPP_DIRECTACCESSURLTEMPLATE
              Value: !Join
                - ''
                - - !ImportValue { "Fn::Sub": '${EnvName}-cdn-url' }
                  - '/direct_access.html?token=%s'
            - Name: PN_DELIVERYPUSH_TIMEPARAMS_SECONDATTEMPTWAITINGTIME
              Value: !Ref PecSecondAttemptWaitTime
            - Name: PN_DELIVERYPUSH_TIMEPARAMS_RECIPIENTVIEWMAXTIMEFORDIGITAL
              Value: !Ref RecipientTimeoutDelayDigital
            - Name: PN_DELIVERYPUSH_TIMEPARAMS_RECIPIENTVIEWMAXTIMEFORANALOG
              Value: !Ref RecipientTimeoutDelayAnalog
            - Name: PN_DELIVERYPUSH_TIMEPARAMS_REFINEMENTTIMEFORCOMPLETELYUNREACHABLE
              Value: !Ref RefinementTimeCompletelyUnreachable
            - Name: SPRING_DATA_CASSANDRA_KEYSPACENAME
              Value: !Sub ${KeyspaceName}
            - Name: SPRING_DATA_CASSANDRA_SSL
              Value: true
            - Name: SPRING_DATA_CASSANDRA_CONTACTPOINTS
              Value: !Sub 'cassandra.${AWS::Region}.${AWS::URLSuffix}:9142'
            - Name: CLIENT_CERTIFICATE_PEM
              Value: '{{resolve:secretsmanager:pa_webhook_client_cert:SecretString:client_certificate_pem}}'
            - Name: CLIENT_KEY_PEM
              Value: '{{resolve:secretsmanager:pa_webhook_client_cert:SecretString:client_key_pem}}'
            - Name: SERVER_CERTIFICATES_PEM
              Value: '{{resolve:secretsmanager:pa_webhook_client_cert:SecretString:server_certificates_pem}}'
          PortMappings:
            - ContainerPort: 8080
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref EnvName, DeliveryPushExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref EnvName, DeliveryPushTaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
  InstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${EnvName}-inst-delpush-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:DescribeRepositories
              - ecr:GetDownloadUrlForLayer
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !ImportValue { "Fn::Sub": '${EnvName}-delpush-input-queue-arn' }
              - !ImportValue { "Fn::Sub": '${EnvName}-extchannel-input-queue-arn' }
              - !ImportValue { "Fn::Sub": '${EnvName}-extchannel-output-queue-arn' }
              - !ImportValue { "Fn::Sub": '${EnvName}-delpush-actions-queue-arn' }
              - !ImportValue { "Fn::Sub": '${EnvName}-delpush-actions-done-queue-arn' }
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectLegalHold
              - s3:GetObjectRetention
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Resource:
              - !Join
                - '/'
                - - !ImportValue { "Fn::Sub": '${EnvName}-attachments-bucket-arn' }
                  - '*'
          - Effect: Allow
            Action:
              - cassandra:Modify
              - cassandra:Select
            Resource:
              - !Sub "arn:aws:cassandra:*:${AWS::AccountId}:/keyspace/*/table/*"
      Roles:
        - !Ref TaskRole
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref EnvName, DeliveryPushAutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref EnvName, DeliveryPushContSecGrp]]
      VpcId: !ImportValue
        "Fn::Sub": '${EnvName}-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref EnvName, DeliveryPushLbSecGrp]]
      VpcId: !ImportValue
        "Fn::Sub": '${EnvName}-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  DeliveryPushService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    #DependsOn:
    #  - ListenerHTTP
    Properties:
      #ServiceName: !Sub '${EnvName}-delivery-push'
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      #HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      PlatformVersion: 1.3.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue { "Fn::Sub": '${EnvName}-subnet1' }
            - !ImportValue { "Fn::Sub": '${EnvName}-subnet2' }
          SecurityGroups:
            - !Ref ContainerSecurityGroup
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref EnvName, DeliveryPush]]
      RetentionInDays: 3
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 1
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt DeliveryPushService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref EnvName, DelPushAutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 60

  ActionsTable:
    Type: AWS::Cassandra::Table
    Properties:
      TableName: actions
      KeyspaceName: !Ref KeyspaceName
      PointInTimeRecoveryEnabled: true
      PartitionKeyColumns:
        - ColumnName: actionid
          ColumnType: text
      RegularColumns:
        - ColumnName: actionjson
          ColumnType: text

  FutureActionsTable:
    Type: AWS::Cassandra::Table
    Properties:
      TableName: future_actions
      KeyspaceName: !Ref KeyspaceName
      PointInTimeRecoveryEnabled: true
      PartitionKeyColumns:
        - ColumnName: time_slot
          ColumnType: text
      ClusteringKeyColumns:
        - Column:
            ColumnName: iun
            ColumnType: text
          OrderBy: ASC
        - Column:
            ColumnName: action_id
            ColumnType: text
          OrderBy: ASC
      RegularColumns:
        - ColumnName: notbefore
          ColumnType: timestamp
        - ColumnName: actionjson
          ColumnType: text

  LastActionPollTable:
    Type: AWS::Cassandra::Table
    Properties:
      TableName: last_poll_for_future_actions
      KeyspaceName: !Ref KeyspaceName
      PointInTimeRecoveryEnabled: true
      PartitionKeyColumns:
        - ColumnName: lastpollkey
          ColumnType: bigint
      RegularColumns:
        - ColumnName: lastpollexecuted
          ColumnType: timestamp

  WebhookBufferTable:
    Type: AWS::Cassandra::Table
    Properties:
      TableName: webhook_buffer
      KeyspaceName: !Ref KeyspaceName
      PointInTimeRecoveryEnabled: true
      PartitionKeyColumns:
        - ColumnName: senderid
          ColumnType: text
      ClusteringKeyColumns:
        - Column:
            ColumnName: statuschangetime
            ColumnType: timestamp
          OrderBy: ASC
        - Column:
            ColumnName: iun
            ColumnType: text
          OrderBy: ASC
      RegularColumns:
        - ColumnName: notificationelement
          ColumnType: text

  WebhookConfigsTable:
    Type: AWS::Cassandra::Table
    Properties:
      TableName: webhook_configs
      KeyspaceName: !Ref KeyspaceName
      PointInTimeRecoveryEnabled: true
      PartitionKeyColumns:
        - ColumnName: paid
          ColumnType: text
      RegularColumns:
        - ColumnName: url
          ColumnType: text
        - ColumnName: since
          ColumnType: timestamp
        - ColumnName: active
          ColumnType: boolean
        - ColumnName: type
          ColumnType: text
        - ColumnName: allnotifications
          ColumnType: boolean
        - ColumnName: notificationselement
          ColumnType: set<text>

Outputs:
  CluserArn:
    Description: ARN del cluster fargate
    Value: !Sub '${Cluster.Arn}'
  ServiceName:
    Description: Nome del servizio di cui fare deploy
    Value: !Sub '${DeliveryPushService.Name}'
