openapi: 3.0.3
info:
  termsOfService: https://notifichedigitali.pagopa.it/pubbliche-amministrazioni/index.html
  title: 'Piattaforma Notifiche: API B2B avanzamento notifiche'
  x-summary: API B2B avanzamento notifiche
  version: 1.0.0
  x-api-id: api-external-b2b-webhook
  description: |-
    I mittenti di notifica possono seguire il flusso di avanzamento delle notifiche in modo  automatico. E' possibile definire fino ad un <font color="red"><strong>massimo di <span id="webhookMaxStreams">5</span> configurazioni di flussi per singola PA</strong></font> su  informazioni relative a: <br/>
      - cambiamento di stato della notifica;  <br/>
      - inserimento di elementi nella timeline. <br/>

    Per ognuno di questi elementi è possibile definire un filtro per ricevere solo alcuni  cambiamenti di stato o determinati eventi di timeline di maggiore interesse.</br><strong>In assenza del filtro verranno restituiti tutti gli elementi relativi alla v1.</strong> </br>Si consiglia di creare gli stream prima dell'invio delle notifiche perché gli stati o gli eventi di  timeline vengono registrati solo successivamente alla creazione dello stream.</br> </br> __Esempio:__ - Stream contenente tutte le notifiche in stato Cancellato: </br></br> `` {
      "title": "NotificationCancelled",
      "eventType": "STATUS",
      "filterValues": [
        "CANCELLED"
      ]
    } `` </br></br> __Esempio:__ - Stream contenente tutte le notifiche in stato Accettato o Consegnato: </br></br> `` {
      "title": "NotificationAcceptedOrDelivered",
      "eventType": "STATUS",
      "filterValues": [
        "ACCEPTED","DELIVERED"
      ]
    } `` </br></br> __Esempio:__ - Stream contenente tutti gli eventi di timeline NOTIFICATION_VIEWED: </br></br> `` {
      "title": "TimelineNotificationViewed",
      "eventType": "TIMELINE",
      "filterValues": [
        "NOTIFICATION_VIEWED"
      ]
    } `` </br></br>
    Gli stati della notifica che possono essere inseriti come __filterValues__ sono i seguenti: 
      <details>
        <summary>Stati - v1</summary>
        <ul>
          <li><strong>ACCEPTED </strong><em>L'ente ha depositato la notifica con successo.</em></li>
          <li><strong>REFUSED </strong><em>Notifica rifiutata a seguito della validazione.</em></li>
          <li><strong>DELIVERING </strong><em>L'invio della notifica è in corso.</em></li>
          <li><strong>DELIVERED </strong><em>La notifica è stata consegnata a tutti i destinatari.</em></li>
          <li><strong>VIEWED </strong><em>Il destinatario ha letto la notifica entro il termine stabilito.</em></li>
          <li><strong>EFFECTIVE_DATE </strong><em>Il destinatario non ha letto la notifica entro il termine stabilito.</em></li>
          <li><strong>UNREACHABLE </strong><em>Il destinatario non è reperibile.</em></li>
        </ul>
      </details>
      <details>
        <summary>Stati - v2 (in aggiunta agli stati v1)</summary>
        <ul>
          <li><strong>CANCELLED </strong><em>L'ente ha annullato l'invio della notifica.</em></li>
        </ul>
      </details>
    </br>
    Le categorie degli eventi di timeline che possono essere inseriti come __filterValues__ sono i seguenti: 

      <details>
        <summary>Eventi di timeline - v1</summary>
        <ul>
          <li><strong>SENDER_ACK_CREATION_REQUEST </strong><em>Invio della richiesta di creazione dell'atto opponibile a terzi di presa in carico per il mittente a safe storage</em></li>
          <li><strong>VALIDATE_NORMALIZE_ADDRESSES_REQUEST </strong><em>Invio della richiesta di validazione e normalizzazione indirizzi fisici presenti nella richiesta di notifica</em></li>
          <li><strong>NORMALIZED_ADDRESS </strong><em>Ricezione esito normalizzazione indirizzo</em></li>
          <li><strong>REQUEST_ACCEPTED </strong><em>Richiesta di notifica accettata a seguito dei controlli di validazione.</em></li>
          <li><strong>AAR_CREATION_REQUEST </strong><em>Invio della richiesta di creazione dell'AAR (Avviso di Avvenuta Ricezione) a safe storage</em></li>
          <li><strong>SEND_COURTESY_MESSAGE </strong><em>Invio di un messaggio di cortesia.</em></li>
          <li><strong>GET_ADDRESS </strong><em>Disponibilità dell’indirizzo specifico (domicilio digitale di piattaforma, domicilio digitale speciale, domicilio digitale generale, indirizzo fisico sulla notifica o sui registri nazionali).</em></li>
          <li><strong>PUBLIC_REGISTRY_CALL </strong><em>Richiesta ai registri pubblici per ottenere domicilio digitale generale o per ottenere indirizzo fisico da ANPR, da registro della imprese, da anagrafe tributaria.</em></li>
          <li><strong>PUBLIC_REGISTRY_RESPONSE </strong><em>Ricevuta la risposta dei registri pubblici.</em></li>
          <li><strong>SCHEDULE_ANALOG_WORKFLOW </strong><em>Pianificazione del workflow per invio cartaceo</em></li>
          <li><strong>SCHEDULE_DIGITAL_WORKFLOW </strong><em>Pianificazione del workflow per invio digitale (PEC) del secondo tentativo in caso di fallimento del primo.</em></li>
          <li><strong>PREPARE_DIGITAL_DOMICILE </strong><em>Preparazione per l’invio dell’avviso digitale.Va a valutare la timeline per capire quale sarà il prossimo indirizzo da usare.</em></li>
          <li><strong>SEND_DIGITAL_PROGRESS </strong><em>Tentativo di Invio PEC ad un determinato indirizzo.</em></li>
          <li><strong>SEND_DIGITAL_DOMICILE </strong><em>Invio digitale dell’avviso di notifica</em></li>
          <li><strong>SEND_DIGITAL_FEEDBACK </strong><em>Ottenuto esito ad un invio digitale</em></li>
          <li><strong>REFINEMENT </strong><em>Perfezionamento per decorrenza termini</em></li>
          <li><strong>SCHEDULE_REFINEMENT </strong><em>Pianificato il perfezionamento per decorrenza termini</em></li>
          <li><strong>DIGITAL_SUCCESS_WORKFLOW </strong><em>Completato con successo il workflow di invio digitale.</em></li>
          <li><strong>DIGITAL_FAILURE_WORKFLOW </strong><em>Completato con fallimento il workflow di invio digitale: <strong>tutti i tentativi di invio ai domicili digitali sono falliti.</strong></em></li>
          <li><strong>ANALOG_SUCCESS_WORKFLOW </strong><em>Completato con successo il workflow di invio cartaceo.</em></li>
          <li><strong>ANALOG_FAILURE_WORKFLOW </strong><em>Completato con fallimento il workflow di invio cartaceo. NOTA: se per tutti i destinatari si conclude il workflow con fallimento verrà scatenato l’evento COMPLETELY_UNREACHABLE</em></li>
          <li><strong>PREPARE_SIMPLE_REGISTERED_LETTER </strong><em>Invio richiesta di prepare (preparazione ad invio) raccomandata semplice a paperChannel</em></li>
          <li><strong>SEND_SIMPLE_REGISTERED_LETTER </strong><em>Invio di raccomandata semplice</em></li>
          <li><strong>SIMPLE_REGISTERED_LETTER_PROGRESS </strong><em>Ricezione informazioni intermedia relative ad una notificazione cartacea semplice</em></li>
          <li><strong>NOTIFICATION_VIEWED_CREATION_REQUEST </strong><em>Invio della richiesta di creazione dell'atto opponibile a terzi di presa visione a safe storage</em></li>
          <li><strong>NOTIFICATION_VIEWED </strong><em>Visualizzazione della notifica (perfeziona la notifica se non già perfezionata per decorrenza termini o da altro destinatario)</em></li>
          <li><strong>PREPARE_ANALOG_DOMICILE </strong><em>Invio richiesta di prepare (preparazione ad invio) cartaceo a paperChannel</em></li>
          <li><strong>SEND_ANALOG_PROGRESS </strong><em>Ricezione informazioni intermedia relative ad una notificazione cartacea</em></li>
          <li><strong>SEND_ANALOG_FEEDBACK </strong><em>Ricezione esito dell'invio cartaceo.
            </br>Il valore del campo details.responseStatus contiene l’esito della notifica digitale.Può assumere i valori di OK o KO .</em></li>
          <li><strong>SEND_ANALOG_DOMICILE </strong><em>Invio cartaceo dell’avviso di notifica</em></li>
          <li><strong>COMPLETELY_UNREACHABLE_CREATION_REQUEST </strong><em>Invio della richiesta di creazione dell'atto (simile a opponibile a terzi) di completamento con fallimento del workflow di invio cartaceo</em></li>
          <li><strong>COMPLETELY_UNREACHABLE </strong><em>Tutti i destinatari risultano irraggiungibili</em></li>
          <li><strong>REQUEST_REFUSED </strong><em>Richiesta di notifica rifiutata per fallimento di validazione.</em></li>
          <li><strong>AAR_GENERATION </strong><em>Generazione dell’AAR (Avviso di Avvenuta Ricezione)</em></li>
          <li><strong>PROBABLE_SCHEDULING_ANALOG_DATE</strong><em>Data probabile di inizio del flusso analogico</em></li>
          <li><strong>PREPARE_ANALOG_DOMICILE_FAILURE</strong><em>Fallimento della richiesta di prepare (preparazione ad invio) cartaceo a paperChannel</em></li>
        </ul>
      </details>
      <details>
        <summary>Eventi di timeline - v2 (tutti gli elementi v1 + gli elementi seguenti)</summary>
        <ul>
          <li><strong>NOTIFICATION_CANCELLATION_REQUEST</strong><em>Richiesta di annullamento di una notifica</em></li>
          <li><strong>NOTIFICATION_CANCELLED</strong><em>Notifica annullata: completamento della richiesta di annullamento di una notifica</em></li>
          <li><strong>PREPARE_ANALOG_DOMICILE_FAILURE</strong><em>Fallimento della richiesta di prepare (preparazione ad invio) cartaceo a paperChannel</em></li>
        </ul>
      </details>
    </br> Di seguito un esempio di creazione e successiva interrogazione dello stream: 

      <details>
        <summary>Esempio dello stream</summary>
      
      <table>
      
      <tr>
      
      <td>
      
      </br>
      
      ### 1) Creazione dello stream ed inserimento notifica
      In questo esempio creo 2 stream con il servizio di [creazione stream](#/Streams/createEventStream): uno per gli status</br> e l'altro per gli eventi di timeline.</br> Vedesi le request <big><strong>a)</strong></big> di esempio con le relative response <big><strong>b)</strong></big>, Da notare che sono presenti</br> dei filtri per ottenere solo specifici status o eventi; se si vogliono ottenere tutte </br>le variazioni limitatamente agli eventi della v1, non bisogna inserire alcun filtro: 
      <code>"filterValues": []</code></br>      
      Una volta creati gli stream, bisogna utilizzare il servizio di [inserimento nuova notifica](https://petstore.swagger.io/?url=https://raw.githubusercontent.com/pagopa/pn-delivery/develop/docs/openapi/api-external-b2b-pa-v1.yaml#/NewNotification/sendNewNotification)</br> sulla Piattaforma. A questo punto bisognerà attendere che vengano completati i controlli</br> di validazione e se questi avranno esito positivo e la notifica verrà accettata, comincerà</br> il workflow di consegna della stessa. Con l'avanzare del tempo verranno generati degli</br> eventi e dei cambiamenti di stato che verranno puntualmente registrati negli stream</br> configurati precedentemente a partire già dal primo evento che certifica l'accettazione</br> o il rifiuto della notifica appena inserita con il relativo passaggio allo stato ACCEPTED.
      
      </br>
      </br>
      </br>
      </br>
      </br>
      </br>
      </br>
      </br>
      
      ### 2) Prima interrogazione degli stream appena creati
      
      Col passare del tempo, potremo interrogare gli stream appena creati per leggere</br> gli eventi registrati, a partire già dall'evento di accettazione della notifica.</br> Si possono interrogare gli eventi registrati all'interno di uno stream con il servizio</br> di [lettura degli eventi](#/Events/consumeEventStream) passando il valore desiderato nello <code>{streamId}</code> ed otterremo</br> la response <big><strong>c)</strong></big> che contiene un array con un numero massimo di <span id="webhookMaxLength">50</span> eventi corrispondenti</br> a quelli che impattano tutte le notifiche inserite dalla creazione dello stream in poi</br> e che potranno essere salvati sul database del client chiamante.</br> Da notare che ogni evento contiene l'<code>eventId</code> ad esso associato.</br>
      
      A questo punto bisogna controllare il parametro <code>retry-after</code> contenuto nell'header</br> della response per capire quanto tempo attendere prima di richiamare lo stream</br> ed ottenere nuovi risultati: 
      <ul>
      <li>Se <code>retry-after = 0</code> significa che lo stream contiene ulteriori eventi rispetto</br> a quelli che ho appena ottenuto nella response e quindi posso richiamare subito</br> il servizio e consumare gli eventi successivi</li></br>
      <li>se <code>retry-after ≠ 0</code> significa che lo stream NON contiene altri eventi rispetto</br> a quelli che ottenuti in questa chiamata e quindi dovrò attendere la quantità</br> di tempo indicata nel <code>retry-after</code> prima di effettuare un'altra chiamata</br> per consumare ulteriori eventi</li>
      </ul>
      
      <font color="red"><strong>NOTA:</strong> 
      è importante consumare <strong>SEMPRE</strong> gli eventi che vengono restituiti dallo stream, anche se il <code>retry-after ≠ 0</code>; infatti tale parametro regola la cadenza di chiamata al servizio, mentre il consumo degli eventi deve avvenire in ogni chiamata nella quale si ottengono eventi in risposta.</font>
      
      </br>
      </br>
      </br>

      ### 3) Successive interrogazioni degli stream appena creati

      Se la response della prima interrogazione degli stream restituisce nell'header: <code>retry-after = 0</code></br> significa che lo stream contiene altri eventi che possono essere consumati subito con</br> un'ulteriore chiamata al servizio di [lettura degli eventi](#/Events/consumeEventStream), ma questa volta per consumare</br> gli eventi successivi, bisogna valorizzare nei query params della request</br> il parametro <code>lastEventId</code> con l'eventId ottenuto nella precedente chiamata.</br> Così facendo il servizio eliminerà dallo stream tutti gli eventi precedenti a quello inserito</br> nel <code>lastEventId</code> e restituirà nella response <big><strong>d)</big></strong> solamente quelli successivi.</br>

      A questo punto si potrà capire, sempre dal valore del <code>retry-after</code> contenuto nell'header</br> se chiamare subito il servizio ed inserire il <code>lastEventId</code> di questa ulteriore chiamata</br> o attendere il tempo indicato nell'header</br>

      <strong>NOTA:</strong> gli eventi eliminati dallo stream in seguito alla chiamata del servizio di [lettura degli eventi](#/Events/consumeEventStream)</br> con il query param <code>lastEventId</code> valorizzato, <strong><font color="red">non potranno più essere recuperati dallo stream</font></strong></br> in nessun modo. E' quindi fondamentale salvare di volta in volta gli eventi che si ottengono</br> all'interno database del chiamante, rispettando la logica del producer/consumer di eventi</br> proposta dagli stream.</br> In caso di eliminazione degli eventi avvenuta per errore, sarà possibile come ultima istanza</br> chiamare il servizio di [lettura dettaglio notifica](https://petstore.swagger.io/?url=https://raw.githubusercontent.com/pagopa/pn-delivery/develop/docs/openapi/api-external-b2b-pa-v1.yaml#/SenderReadB2B/retrieveSentNotification) che però esporrà tutti gli eventi di timeline e lo stato</br> attuale della singola notifica ed è quindi meno performante delle stream.

      </td>
      <td>
      
      #### a) Request di POST /delivery-progresses/streams
      
        {                                           {
          "title": "stream-status-prova",             "title": "stream-timeline-prova",
          "eventType": "STATUS",                      "eventType": "TIMELINE",
          "filterValues": [                           "filterValues": [
              "ACCEPTED"                                  "REQUEST_ACCEPTED"
          ]                                           ]
        }                                           }
        
      #### b) Response di POST /delivery-progresses/streams
        
        {                                           {
            "title": "stream-status-prova",           "title": "stream-timeline-prova",
            "eventType": "STATUS",                    "eventType": "TIMELINE",
            "filterValues": [                         "filterValues": [
                "ACCEPTED"                                "REQUEST_ACCEPTED"
            ],                                        ],
            "streamId":                               "streamId": 
            "4e6d5e59-85fc-4ef7-bad8",                "6d87ree59-31ff-2rr7-lok1",
            "activationDate":                         "activationDate": 
            "2022-12-12T14:52:23.362454Z"             "2022-12-12T14:53:23.362454Z"
        }                                           }  
      
      </br>
      </br>

      #### c) Response di GET /delivery-progresses/streams/<code>{streamId}</code>/events
      
        Headers: { "retry-after": "60000" }

        [
            {
                "eventId": "0000000000000000000001",
                "timestamp": "2022-12-06T08:14:26.140041Z",
                "notificationRequestId": "QUJDRC1BQkNELUFCQ0QtMjAyMjEyLVYtMQ==",
                "iun": "ABCD-ABCD-ABCD-202212-V-1",
                "newStatus": "ACCEPTED",
                "timelineEventCategory": "REQUEST_ACCEPTED",
                "recipientIndex": "0",
                "analogCost": "0",
                "channel": "PEC",
                "legalfactIds": [
                  "PN_LEGAL_FACTS-0002-9G2S-RK3M-JI62-JK9Q",
                  "PN_LEGAL_FACTS-0002-9G2S-RK3M-JI62-JK9E"
                ]
            }, 
            ... // altri eventi nell'array
        ]

      </br>
      </br>
      </br>
      </br>
      </br>
      </br>
      </br>

      #### d) Response di GET /delivery-progresses/streams/<code>{streamId}</code>/events</br> chiamato valorizzando nei query params il parametro <code>lastEventId</code> con l'eventId</br> dell'ultimo evento nella precedente chiamata.</br>
      
        Headers: { "retry-after": "60000" }

        [
            {
                "eventId": "0000000000000000000011",
                "timestamp": "2022-12-07T10:13:22.158041Z",
                "notificationRequestId": "QUJDRC1BQkNELUFCQ0QtMjAyMjEyLVYtMQ==",
                "iun": "ABCD-ABCD-ABCD-202212-V-1",
                "newStatus": "DELIVERED",
                "timelineEventCategory": "DIGITAL_SUCCESS_WORKFLOW",
                "recipientIndex": "0",
                "analogCost": "0",
                "channel": "PEC",
                "legalfactIds": [
                  "PN_LEGAL_FACTS-0002-9G2S-RK3M-JI62-JK9Q",
                  "PN_LEGAL_FACTS-0002-9G2S-RK3M-JI62-JK9E"
                ]
            }, 
            ... // altri eventi nell'array
        ]
      
      </td>
      
      </tr>
      
      </table>

      </br>
      </br>
      
      </details>  

    Le operazioni con il tag __Streams__ gestiscono la configurazione: <br/>
      - [Creazione](#/Streams/createEventStream) <br/>
      - [Elencare la lista degli stream creati](#/Streams/listEventStreams) <br/>
      - [Leggere i metadati dello stream](#/Streams/getEventStream) <br/>
      - [Modifica](#/Streams/updateEventStream) <br/>
      - [Cancellazione](#/Streams/deleteEventStream) <br/>

    Le operazioni con il tag __Events__ sono quelle utilizzate per la [lettura degli eventi](#/Events/consumeEventStream)  filtrati in base alla configurazione impostata negli streams.
    La api restituisce un massimo di <span id="webhookMaxLength">50</span> elementi. Se <u>esistono</u> ulteriori eventi nello stream, allora la response del servizio  restituice l'elemento `retryAfter = 0`; ed è quindi possibile richiamare immediatamente il servizio per ottenere gli eventi successivi, utilizzando  il parametro _lastEventId_ valorizzato con l'ultimo _eventId_ della richiesta precedente. Si evidenzia che ogni nuova chiamata al servizio con _lastEventId_ implica la cancellazione degli eventi precedenti. Tuttavia, in fase di implementazione del client che consumerà i servizi, bisogna considerare il fattore della __non univocità degli eventi__: è possibile che se in un dato secondo avvengano più eventi contemporaneamente, nella chiamata successiva allo stream dove si inserisce l'_eventId_, non vengano cancellati gli altri eventi contemporanei avvenuti nello stesso secondo dell'_eventId_ indicato; ottenendo quindi una riproposizione di eventi già ottenuti dalla chiamata precedente.</br> Se <u>non esistono</u> ulteriori eventi nello stream, allora la response del servizio restituisce il valore di `retryAfter ≠ 0` ed è quindi necessario attendere il tempo indicato dalla retryAfter per consumare eventualmente nuovi eventi nello stream.</br> <font color="red"><strong>Nella prima versione di Piattaforma Notifiche non verrà implementata la segregazione dei gruppi e pertanto le informazioni presenti all'interno di uno stream saranno accessibili a tutte le apiKey della stessa PA; Si evidenzia comunque che gli eventi esposti dalle stream sono anonimizzati e non contengono informazioni personali o sensibili dei soggetti impattati dagli eventi.</font></strong></br> <font color="red">__Gli eventi sono mantenuti per un massimo di <span id="webhookTtl">7</span> giorni dopo i quali sono automaticamente cancellati anche se non sono stati prelevati dallo stream, e sarà possibile ottenere lo stato della notifica solo attraverso il servizio [getNotificationRequestStatus](https://petstore.swagger.io/?url=https://raw.githubusercontent.com/pagopa/pn-delivery/develop/docs/openapi/api-external-b2b-pa-v1.yaml#/SenderReadB2B/retrieveNotificationRequestStatus)__ </font> 
    </br> </br>
    <h3>Le <strong>FAQ</strong> possono essere consultate al seguente link:<a href="https://docs.pagopa.it/v1.0-1/">https://docs.pagopa.it/v1.0-1/</a></h3>
    <details>
      <summary><strong><big><big><big><big>AMBIENTI</big></big></big></big></strong></summary>
    <ul>   <li><strong>https://api.pn.pagopa.it:</strong></br>Ambiente di produzione</li> <li><strong>https://api.coll.pagopa.it:</strong></br>Ambiente di collaudo</li> <li><strong>https://api.svil.pn.pagopa.it:</strong></br>Ambiente di test. Potrebbe subire modifiche/integrazioni in futuro, rimanendo comunque non-bloccante e rispettando il principio di retro-attività</li> <li><strong>https://api.dev.pn.pagopa.it:</strong></br>Ambiente di sviluppo</li> </ul>   </details></br>
  contact:
    email: pn-supporto-enti@pagopa.it
  license:
    name: Licenza di PN
    url: https://notifichedigitali.pagopa.it/pubbliche-amministrazioni/index.html
servers:
  - url: https://api.pn.pagopa.it
    description: Ambiente di produzione
  - url: https://api.coll.pn.pagopa.it
    description: Ambiente di collaudo
  - url: https://api.uat.pn.pagopa.it
    description: Ambiente di test
  - url: https://api.dev.pn.pagopa.it
    description: Ambiente di sviluppo
security:
  - ApiKeyAuth: []
tags:
  - name: HealthCheck
    description: 'Invocazioni per sapere lo stato del microservizio # il servizio è ancora in fase di sviluppo'
  - name: Streams
    description: Gestione degli stream di eventi che PN mette a disposizione
  - name: Events
    description: Metodi per la lettura degli eventi dagli stream
paths:
  /status:
    get:
      summary: healthCheck path
      description: healtCheck path per verificare lo stato del microservizio
      tags:
        - HealthCheck
      operationId: status
      responses:
        '200':
          description: Ok
        '500':
          description: Internal Server Error
  /delivery-progresses/streams:
    post:
      summary: Crea nuovo stream di eventi
      description: Viene richiesta la creazione di un flusso di eventi specificando se gli eventi saranno  relativi ai cambi di stato o agli eventi di timeline. <br/> In risposta, Piattaforma Notifiche, comunicherà un identificativo dello stream e il  timestamp di effettiva attivazione del flusso, tipicamente pochi secondi dopo che è stata  invocata l'operazione.
      tags:
        - Streams
      operationId: createEventStream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamCreationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamMetadataResponse'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    get:
      summary: Elenca stream di eventi
      description: Elenca gli stream di eventi
      tags:
        - Streams
      operationId: listEventStreams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamListResponse'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /delivery-progresses/streams/{streamId}:
    parameters:
      - $ref: '#/components/parameters/pathStreamId'
    get:
      summary: Leggi metadati dello stream
      description: Permette di leggere le configurazioni di uno stream di eventi.
      tags:
        - Streams
      operationId: retrieveEventStream
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamMetadataResponse'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      summary: Update Stream metadata
      description: Permette di cambiare le configurazioni dei filtri associati a uno stream di eventi
      tags:
        - Streams
      operationId: updateEventStream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamCreationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamMetadataResponse'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      summary: Remove Event Stream
      description: 'Elimina uno steam di eventi: elimina sia le configurazioni sia tutti gli eventi  associati allo stream e non ancora consumati.'
      tags:
        - Streams
      operationId: removeEventStream
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /delivery-progresses/streams/{streamId}/events:
    get:
      summary: Leggi progressi notifiche
      description: Permette di leggere gli eventi presenti nello stream di aggiornamenti e indica che  la P.A. ha ricevuto e memorizzato l'evento identificato dal parametro _lastEventId_ e tutti gli eventi precedenti. Tali eventi potranno essere cancellati dallo stream.
      tags:
        - Events
      operationId: consumeEventStream
      parameters:
        - $ref: '#/components/parameters/pathStreamId'
        - $ref: '#/components/parameters/queryLastEventId'
      responses:
        '200':
          description: OK
          headers:
            retry-after:
              schema:
                type: integer
                format: int32
              description: Numero di millisecondi di attesa prima di effettuare una nuova lettura di eventi. <br/> Sarà valorizzato a zero se ci sono eventi in coda che non sono stati forniti per  raggiunta dimensione massima della risposta. <br/> Sarà maggiore di zero se gli eventi in coda sono stati tutti inviati.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressResponse'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too Many Requests
          headers:
            retry-after:
              schema:
                type: integer
                format: int32
              description: Numero di millisecondi di attesa prima di effettuare una nuova lettura di eventi.
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  parameters:
    queryLastEventId:
      description: Identificativo dell'ultimo evento memorizzato dal chiamante, se non passato si intende dal primo evento presente nello stream. Numero in una stringa di 38 caratteri con padding iniziale composto da '0'.
      name: lastEventId
      in: query
      required: false
      schema:
        type: string
        minLength: 38
        maxLength: 38
        pattern: ^0\d{37}$
    pathStreamId:
      description: Identificativo dello stream di eventi
      name: streamId
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    StreamCreationRequest:
      description: Richiesta di creazione di uno stream di eventi di avanzamento delle notifiche.
      type: object
      required:
        - title
        - eventType
      properties:
        title:
          description: Nome sintetico dello stream
          type: string
          maxLength: 256
          pattern: ^.*$
        eventType:
          description: |-
            Tipo di eventi presenti nel flusso:
              - _STATUS_: cambiamenti di stato delle notifiche
              - _TIMELINE_: eventi a granularità fine
          type: string
          enum:
            - STATUS
            - TIMELINE
        filterValues:
          description: rappresenta l'elenco degli stati o elementi di timeline che si vogliono filtrare; inserendo un array vuoto [] si riceveranno solo gli elementi relativi a v1
          type: array
          items:
            type: string
            minLength: 5
            maxLength: 256
            pattern: ^[A-Z_]+$
    StreamMetadataResponse:
      description: Configurazioni di un flusso di eventi
      allOf:
        - $ref: '#/components/schemas/StreamCreationRequest'
        - type: object
          required:
            - streamId
            - activationDate
          properties:
            streamId:
              description: Identificativo del flusso di eventi
              type: string
              format: uuid
            activationDate:
              description: Timestamp in cui il flusso di eventi è stato attivato
              type: string
              format: date-time
    StreamListResponse:
      description: Elenco di flussi di eventi
      type: array
      items:
        $ref: '#/components/schemas/StreamListElement'
    StreamListElement:
      type: object
      required:
        - title
        - streamId
      properties:
        streamId:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 256
          pattern: ^.*$
    ProgressResponse:
      type: array
      items:
        $ref: '#/components/schemas/ProgressResponseElement'
    ProgressResponseElement:
      type: object
      required:
        - eventId
        - timestamp
      properties:
        eventId:
          description: Elemento che garantisce univocità e ordinamento temporale all'interno dello stream
          type: string
        timestamp:
          description: Istante a cui è avvenuto l'evento
          type: string
          format: date-time
        notificationRequestId:
          description: Identificativo della richiesta di notifica
          type: string
        iun:
          description: Identificativo della notifica, presente solo se la richiesta di notifica è  stata accettata.
          type: string
          maxLength: 25
          pattern: ^[A-Z]{4}-[A-Z]{4}-[A-Z]{4}-[0-9]{6}-[A-Z]{1}-[0-9]{1}$
        newStatus:
          $ref: '#/components/schemas/NotificationStatus'
        timelineEventCategory:
          $ref: '#/components/schemas/TimelineElementCategoryV20'
        recipientIndex:
          type: integer
          format: int32
          minimum: 0
          description: Indice del destinatario al quale si riferisce l'evento
        analogCost:
          type: integer
          format: int32
          description: Eventuale costo in eurocent associato all'evento
        channel:
          type: string
          description: 'Canale a cui si riferisce l''evento. I valori previsti sono: - Per eventi legati a messaggi di cortesia: APPIO, SMS, EMAIL - Per eventi legati all''invio digitale: PEC - Per eventi legati all''invio analogico: AR_REGISTERED_LETTER, REGISTERED_LETTER_890 - Per eventi legati all''invio di raccomandate semplici: SIMPLE_REGISTERED_LETTER'
        legalfactIds:
          type: array
          items:
            type: string
          example:
            - PN_LEGAL_FACTS-0002-9G2S-RK3M-JI62-JK9Q
            - PN_LEGAL_FACTS-0002-9G2S-RK3M-JI62-JK9E
          description: chiavi degli eventuali allegati associati all'evento
        validationErrors:
          type: array
          description: eventuali errori di validazione associati all'evento
          items:
            $ref: '#/components/schemas/RefusedReason'
    RefusedReason:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
    ProblemError:
      properties:
        code:
          description: Internal code of the error, in human-readable format
          example: PN_PARAMETER_TOO_LONG | PN_PARAMETER_TOO_SHORT | PN_DUPLICATE_ENTRY | etc...
          type: string
        element:
          description: Parameter or request body field name for validation error
          example: body.order.item[2].quantity
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 1024
          type: string
      required:
        - code
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          type: integer
          format: int32
          example: 503
          maximum: 600
          minimum: 100
          exclusiveMaximum: true
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: ^[ -~]{0,64}$
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: ^.{0,4096}$
          type: string
        traceId:
          description: Internal support identifier associated to error
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        timestamp:
          description: date and time referred to UTC
          example: '2022-07-27T12:22:33.444Z'
          type: string
          format: date-time
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      required:
        - status
        - errors
    NotificationStatus:
      type: string
      description: |
        stato di avanzamento del processo di notifica:
          * `IN_VALIDATION` - notifica depositata in attesa di validazione
          * `ACCEPTED` - L'ente ha depositato la notifica con successo
          * `REFUSED` - Notifica rifiutata a seguito della validazione
          * `DELIVERING` - L'invio della notifica è in corso
          * `DELIVERED` - La notifica è stata consegnata a tutti i destinatari
          * `VIEWED` - Il destinatario ha letto la notifica entro il termine stabilito
          * `EFFECTIVE_DATE` - Il destinatario non ha letto la notifica entro il termine stabilito
          * `PAID` - Uno dei destinatari ha pagato la notifica
          * `UNREACHABLE` - Il destinatario non è reperibile
          * `CANCELLED` - L'ente ha annullato l'invio della notifica
      enum:
        - IN_VALIDATION
        - ACCEPTED
        - REFUSED
        - DELIVERING
        - DELIVERED
        - VIEWED
        - EFFECTIVE_DATE
        - PAID
        - UNREACHABLE
        - CANCELLED
    TimelineElementCategoryV20:
      type: string
      description: |
        stato di avanzamento del processo di notifica:`
          * `SENDER_ACK_CREATION_REQUEST` - Invio della richiesta di creazione dell'atto opponibile a terzi di presa in carico per il mittente a safe storage
          * `VALIDATE_NORMALIZE_ADDRESSES_REQUEST` - Invio della richiesta di validazione e normalizzazione indirizzi fisici presenti nella richiesta di notifica
          * `NORMALIZED_ADDRESS` - Salvataggio indirizzi normalizzati
          * `REQUEST_ACCEPTED` - Richiesta di notifica accettata a seguito dei controlli di validazione
          * `REQUEST_REFUSED` - Richiesta di notifica rifiutata per fallimento di validazione
          * `SEND_COURTESY_MESSAGE` - Invio di un messaggio di cortesia
          * `GET_ADDRESS` - Disponibilità dell’indirizzo specifico (domicilio digitale di piattaforma, domicilio digitale speciale, domicilio digitale generale, indirizzo fisico sulla notifica o sui registri nazionali)
          * `PUBLIC_REGISTRY_CALL` - Richiesta ai registri pubblici per ottenere domicilio digitale generale o per ottenere indirizzo fisico da ANPR, da registro della imprese, da anagrafe tributaria.
          * `PUBLIC_REGISTRY_RESPONSE` - Ricevuta la risposta dei registri pubblici
          * `SCHEDULE_ANALOG_WORKFLOW` - Pianificazione del workflow per invio cartaceo
          * `SCHEDULE_DIGITAL_WORKFLOW` -Pianificazione del workflow per invio digitale (PEC) del secondo tentativo in caso di fallimento del primo.
          * `PREPARE_DIGITAL_DOMICILE` - Preparazione per l’invio dell’avviso digitale.Va a valutare la timeline per capire quale sarà il prossimo indirizzo da usare.
          * `SEND_DIGITAL_DOMICILE` - Invio digitale dell’avviso di notifica
          * `SEND_DIGITAL_PROGRESS` - Tentativo di Invio PEC ad un determinato indirizzo.
          * `SEND_DIGITAL_FEEDBACK` - Ottenuto esito ad un invio digitale
          * `SCHEDULE_REFINEMENT` - Pianificato il perfezionamento per decorrenza termini
          * `REFINEMENT` - Perfezionamento per decorrenza termini
          * `DIGITAL_DELIVERY_CREATION_REQUEST` - Invio della richiesta di creazione dell'atto opponibile a terzi di chiusura del workflow digitale a safe storage
          * `DIGITAL_SUCCESS_WORKFLOW` - Completato con successo il workflow di invio digitale
          * `DIGITAL_FAILURE_WORKFLOW` - Completato con fallimento il workflow di invio digitale: tutti i tentativi di invio ai domicili digitali sono falliti.
          * `ANALOG_SUCCESS_WORKFLOW` - Completato con successo il workflow di invio cartaceo 
          * `ANALOG_FAILURE_WORKFLOW` - Completato con fallimento il workflow di invio cartaceo NOTA: se per tutti i destinatari si conclude il workflow con fallimento verrà scatenato l’evento COMPLETELY_UNREACHABLE
          * `PREPARE_SIMPLE_REGISTERED_LETTER` - Invio richiesta di prepare (preparazione ad invio) raccomandata semplice a paperChannel
          * `SEND_SIMPLE_REGISTERED_LETTER` - Invio di raccomandata semplice
          * `SEND_SIMPLE_REGISTERED_LETTER_PROGRESS` - Ricezione informazioni intermedia relative ad una notificazione cartacea semplice
          * `NOTIFICATION_VIEWED_CREATION_REQUEST` - Invio della richiesta di creazione dell'atto opponibile a terzi di presa visione a safe storage
          * `NOTIFICATION_VIEWED` - Visualizzazione della notifica (perfeziona la notifica se non già perfezionata per decorrenza termini o da altro destinatario)
          * `PREPARE_ANALOG_DOMICILE` - Invio richiesta di prepare (preparazione ad invio) cartaceo a paperChannel
          * `SEND_ANALOG_DOMICILE` - Invio cartaceo dell’avviso di notifica
          * `SEND_ANALOG_PROGRESS` - Ricezione informazioni intermedia relative ad una notificazione cartacea
          * `SEND_ANALOG_FEEDBACK` - Ricezione esito dell'invio cartaceo
          * `COMPLETELY_UNREACHABLE_CREATION_REQUEST` - Invio della richiesta di creazione dell'atto (simile a opponibile a terzi) di completamento con fallimento del workflow di invio cartaceo
          * `COMPLETELY_UNREACHABLE` - Tutti i destinatari risultano irraggiungibili
          * `AAR_CREATION_REQUEST` - Invio della richiesta di creazione dell'AAR (Avviso di Avvenuta Ricezione) a safe storage 
          * `AAR_GENERATION` - Generazione dell’AAR (Avviso di Avvenuta Ricezione)
          * `PAYMENT` - Ricezione pagamento della notifica
          * `NOT_HANDLED` - Per la sperimentazione l'invio analogico non è previsto, viene inserito tale elemento di timeline
          * `PROBABLE_SCHEDULING_ANALOG_DATE` - Data probabile di inizio del flusso analogico
          * `NOTIFICATION_CANCELLATION_REQUEST` - Richiesta di annullamento di una notifica
          * `NOTIFICATION_CANCELLED` - Notifica annullata
          * `PREPARE_ANALOG_DOMICILE_FAILURE` - Fallimento della richiesta di prepare (preparazione ad invio) cartaceo a paperChannel
      enum:
        - SENDER_ACK_CREATION_REQUEST
        - VALIDATE_NORMALIZE_ADDRESSES_REQUEST
        - NORMALIZED_ADDRESS
        - REQUEST_ACCEPTED
        - SEND_COURTESY_MESSAGE
        - GET_ADDRESS
        - PUBLIC_REGISTRY_CALL
        - PUBLIC_REGISTRY_RESPONSE
        - SCHEDULE_ANALOG_WORKFLOW
        - SCHEDULE_DIGITAL_WORKFLOW
        - PREPARE_DIGITAL_DOMICILE
        - SEND_DIGITAL_DOMICILE
        - SEND_DIGITAL_PROGRESS
        - SEND_DIGITAL_FEEDBACK
        - REFINEMENT
        - SCHEDULE_REFINEMENT
        - DIGITAL_DELIVERY_CREATION_REQUEST
        - DIGITAL_SUCCESS_WORKFLOW
        - DIGITAL_FAILURE_WORKFLOW
        - ANALOG_SUCCESS_WORKFLOW
        - ANALOG_FAILURE_WORKFLOW
        - PREPARE_SIMPLE_REGISTERED_LETTER
        - SEND_SIMPLE_REGISTERED_LETTER
        - SEND_SIMPLE_REGISTERED_LETTER_PROGRESS
        - NOTIFICATION_VIEWED_CREATION_REQUEST
        - NOTIFICATION_VIEWED
        - PREPARE_ANALOG_DOMICILE
        - SEND_ANALOG_DOMICILE
        - SEND_ANALOG_PROGRESS
        - SEND_ANALOG_FEEDBACK
        - PAYMENT
        - COMPLETELY_UNREACHABLE
        - COMPLETELY_UNREACHABLE_CREATION_REQUEST
        - REQUEST_REFUSED
        - AAR_CREATION_REQUEST
        - AAR_GENERATION
        - NOT_HANDLED
        - PROBABLE_SCHEDULING_ANALOG_DATE
        - NOTIFICATION_CANCELLATION_REQUEST
        - NOTIFICATION_CANCELLED
        - PREPARE_ANALOG_DOMICILE_FAILURE
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
